minetest.register_schematic(schematic definition)
    * returns an integer uniquely identifying the registered schematic
    * added to `minetest.registered_schematic` with the key of `schematic.name`
    * if `schematic.name` is nil, the key is the returned ID
    * if the schematic is loaded from a file, schematic.name is set to the
      filename.
    * if the function is called when loading the mod, and schematic.name is a
      relative path, then the current mod path will be prepended to the
      schematic filename.

minetest.clear_registered_schematics()
    * clears all schematics currently registered

minetest.create_schematic(p1, p2, probability_list, filename, slice_prob_list)
    * Create a schematic from the volume of map specified by the box formed by
      p1 and p2.
    * Apply the specified probability and per-node force-place to the specified
      nodes according to the `probability_list`.
        * `probability_list` is an array of tables containing two fields, `pos`
          and `prob`.
            * `pos` is the 3D vector specifying the absolute coordinates of the
              node being modified,
            * `prob` is an integer value from `0` to `255` that encodes
              probability and per-node force-place. Probability has levels
              0-127, then 128 may be added to encode per-node force-place.
              For probability stated as 0-255, divide by 2 and round down to
              get values 0-127, then add 128 to apply per-node force-place.
            * If there are two or more entries with the same pos value, the
              last entry is used.
            * If `pos` is not inside the box formed by `p1` and `p2`, it is
              ignored.
            * If `probability_list` equals `nil`, no probabilities are applied.
    * Apply the specified probability to the specified horizontal slices
      according to the `slice_prob_list`.
        * `slice_prob_list` is an array of tables containing two fields, `ypos`
          and `prob`.
            * `ypos` indicates the y position of the slice with a probability
              applied, the lowest slice being `ypos = 0`.
            * If slice probability list equals `nil`, no slice probabilities
              are applied.
    * Saves schematic in the Minetest Schematic format to filename.

minetest.place_schematic(pos, schematic, rotation, replacements, force_placement, flags)
    * Place the schematic specified by schematic (see [Schematic specifier]) at
      `pos`.
    * `rotation` can equal `"0"`, `"90"`, `"180"`, `"270"`, or `"random"`.
    * If the `rotation` parameter is omitted, the schematic is not rotated.
    * `replacements` = `{["old_name"] = "convert_to", ...}`
    * `force_placement` is a boolean indicating whether nodes other than `air`
      and `ignore` are replaced by the schematic.
    * Returns nil if the schematic could not be loaded.
    * **Warning**: Once you have loaded a schematic from a file, it will be
      cached. Future calls will always use the cached version and the
      replacement list defined for it, regardless of whether the file or the
      replacement list parameter have changed. The only way to load the file
      anew is to restart the server.
    * `flags` is a flag field with the available flags:
        * place_center_x
        * place_center_y
        * place_center_z

minetest.place_schematic_on_vmanip(vmanip, pos, schematic, rotation, replacement, force_placement, flags)
    * This function is analogous to minetest.place_schematic, but places a
      schematic onto the specified VoxelManip object `vmanip` instead of the
      map.
    * Returns false if any part of the schematic was cut-off due to the
      VoxelManip not containing the full area required, and true if the whole
      schematic was able to fit.
    * Returns nil if the schematic could not be loaded.
    * After execution, any external copies of the VoxelManip contents are
      invalidated.
    * `flags` is a flag field with the available flags:
        * place_center_x
        * place_center_y
        * place_center_z

minetest.serialize_schematic(schematic, format, options)
    * Return the serialized schematic specified by schematic
      (see [Schematic specifier])
    * in the `format` of either "mts" or "lua".
    * "mts" - a string containing the binary MTS data used in the MTS file
      format.
    * "lua" - a string containing Lua code representing the schematic in table
      format.
    * `options` is a table containing the following optional parameters:
        * If `lua_use_comments` is true and `format` is "lua", the Lua code
          generated will have (X, Z) position comments for every X row
          generated in the schematic data for easier reading.
        * If `lua_num_indent_spaces` is a nonzero number and `format` is "lua",
          the Lua code generated will use that number of spaces as indentation
          instead of a tab character.

Schematic specifier
--------------------

A schematic specifier identifies a schematic by either a filename to a
Minetest Schematic file (`.mts`) or through raw data supplied through Lua,
in the form of a table.  This table specifies the following fields:

* The `size` field is a 3D vector containing the dimensions of the provided
  schematic. (required field)
* The `yslice_prob` field is a table of {ypos, prob} slice tables. A slice table
  sets the probability of a particular horizontal slice of the schematic being
  placed. (optional field)
  `ypos` = 0 for the lowest horizontal slice of a schematic.
  The default of `prob` is 255.
* The `data` field is a flat table of MapNode tables making up the schematic,
  in the order of `[z [y [x]]]`. (required field)
  Each MapNode table contains:
    * `name`: the name of the map node to place (required)
    * `prob` (alias `param1`): the probability of this node being placed
      (default: 255)
    * `param2`: the raw param2 value of the node being placed onto the map
      (default: 0)
    * `force_place`: boolean representing if the node should forcibly overwrite
      any previous contents (default: false)

About probability values:

* A probability value of `0` or `1` means that node will never appear
  (0% chance).
* A probability value of `254` or `255` means the node will always appear
  (100% chance).
* If the probability value `p` is greater than `1`, then there is a
  `(p / 256 * 100)` percent chance that node will appear when the schematic is
  placed on the map.
